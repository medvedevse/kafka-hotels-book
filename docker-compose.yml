services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_INIT_LIMIT: 3
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-net

  kafka1:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9091:9091"
      # - "19091:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka1:29091,PLAINTEXT_HOST://0.0.0.0:9091
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29091, PLAINTEXT_HOST://${KAFKA_ADDR_1}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Настройки репликации для кластера
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka1_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server kafka1:29091
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-net

  kafka2:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9092:9092"
      # - "19092:9101"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka2:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29092, PLAINTEXT_HOST://${KAFKA_ADDR_2}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Настройки репликации для кластера
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka2_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server kafka2:29092
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-net

  kafka3:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9093:9093"
      # - "19093:9101"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka3:29093,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29093, PLAINTEXT_HOST://${KAFKA_ADDR_3}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Настройки репликации для кластера
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka3_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server kafka3:29093
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9020:8080
    environment:
      AUTH_TYPE: DISABLED
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29091,kafka2:29092,kafka3:29093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - kafka-net

  redis:
   image: redis:7.2-alpine
   hostname: redis
   container_name: redis
   ports:
     - "6379:6379"
   command: redis-server --appendonly yes --save 60 1
   volumes:
     - redis_data:/data
   healthcheck:
     test: ["CMD", "redis-cli", "ping"]
     interval: 10s
     timeout: 3s
     retries: 5
   networks:
     - kafka-net

  redis-commander:
    image: rediscommander/redis-commander:latest
    hostname: redis-commander
    container_name: redis-commander
    restart: always
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - kafka-net

volumes:
  zookeeper_data:
  zookeeper_log:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  redis_data:

networks:
  kafka-net:
    driver: bridge
